name: cime testing

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      # Offical action is deprecated in favor of pre-commit.ci
      # Should evaulate switching or just running manually.
      # - name: Runs pre-commit action
      #   # Do not run if using act tooling (https://github.com/nektos/act)
      #   if: ${{ !env.ACT }}
      #   uses: pre-commit/action@v2.0.3
      - name: Runs pre-commit
        run: |
          pip install pre-commit

          pre-commit run -a

  # Check if there has been a change to any file under docker/
  check-dockerfile-changed:
    runs-on: ubuntu-latest
    outputs:
      all_changed_and_modified_files: ${{ steps.get-changed-files.outputs.all_changed_and_modified_files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Get changed files
        id: get-changed-files
        uses: tj-actions/changed-files@v17.2
        with:
          files: docker/*

  # Only build container if there has been a change.
  # Only upload container when merging into master and there has been a change.
  build-containers:
    runs-on: ubuntu-latest
    needs: check-dockerfile-changed
    if: ${{ needs.check-dockerfile-changed.outputs.all_changed_and_modified_files != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build container
        run: |
          echo "Build container"

          docker build -t cime:latest --target base docker/
      - name: Push container
        # only push image on a push event to master
        if: github.event_name == 'push'
        run: |
          echo "Push container"

          echo "${{ secrets.DOCKER_HUB_PWD }}" | docker login -u ${{ secrets.DOCKER_HUB_USER }} --password-stdin

          docker tag cime:latest ${{ secrets.DOCKER_HUB_REPO }}/cime:${GITHUB_SHA::7}
          docker tag cime:latest ${{ secrets.DOCKER_HUB_REPO }}/cime:latest

          docker push ${{ secrets.DOCKER_HUB_REPO }}/cime:${GITHUB_SHA::7}
          docker push ${{ secrets.DOCKER_HUB_REPO }}/cime:latest

  # Runs unit testing under different python versions.
  unit-testing:
    runs-on: ubuntu-latest
    needs: build-containers
    if: ${{ always() }}
    container: jasonb87/cime:latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run tests
        shell: bash
        env:
          INIT: "false"
          CIME_MODEL: "cesm"
          CIME_DRIVER: "mct"
        run: |
          export INSTALL_PATH="$(pwd)"

          mamba install -y python=${{ matrix.python-version }}

          source /entrypoint.sh

          init_cime

          pytest -vvv --machine docker --no-fortran-run scripts/lib/CIME/tests/test_unit*

  # Run system tests with E3SM as the model
  # Still needed as there are E3SM specific tests
  e3sm-system-testing:
    runs-on: ubuntu-latest
    needs: build-containers
    if: ${{ always() }}
    container: jasonb87/cime:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache inputdata
        if: ${{ ! env.ACT }}
        uses: actions/cache@v2
        with:
          path: /storage/inputdata
          key: e3sm-inputdata-2
      - name: Run tests
        shell: bash
        timeout-minutes: 25
        env:
          INIT: "false"
          CIME_MODEL: "e3sm"
          CIME_DRIVER: "mct"
          UPDATE_CIME: "true"
          GIT_SHALLOW: "true"
        run: |
          export INSTALL_PATH="$(pwd)/E3SM"
          export CIME_REPO=https://github.com/${{ github.event.pull_request.head.repo.full_name || github.repository }}
          export CIME_BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF##*/}}

          source /entrypoint.sh

          init_e3sm

          source /opt/conda/etc/profile.d/conda.sh

          conda activate base

          pytest -vvv --machine docker --no-fortran-run scripts/lib/CIME/tests/test_sys*

  # Run system tests with CESM as the model
  # Still needed as there are CESM specific tests
  cesm-system-testing:
    runs-on: ubuntu-latest
    needs: build-containers
    if: ${{ always() }}
    container: jasonb87/cime:latest
    strategy:
      matrix:
        driver: ["mct", "nuopc"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache inputdata
        if: ${{ ! env.ACT }}
        uses: actions/cache@v2
        with:
          path: /storage/inputdata
          key: cesm-${{ matrix.driver }}-inputdata-2
      - name: Run tests
        shell: bash
        env:
          INIT: "false"
          CIME_MODEL: "cesm"
          CIME_DRIVER: ${{ matrix.driver }}
          UPDATE_CIME: "true"
          GIT_SHALLOW: "true"
        run: |
          export INSTALL_PATH="$(pwd)/cime"
          export CIME_REPO=https://github.com/${{ github.event.pull_request.head.repo.full_name || github.repository }}
          export CIME_BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF##*/}}

          source /entrypoint.sh

          init_cime

          source /opt/conda/etc/profile.d/conda.sh

          conda activate base

          pytest -vvv --machine docker --no-fortran-run scripts/lib/CIME/tests/test_sys*
